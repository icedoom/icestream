Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> ice_file
Rule 1     ice_file -> MACRO_IFNDEF ID MACRO_DEFINE ID file_statement MACRO_ENDIF
Rule 2     file_statement -> <empty>
Rule 3     file_statement -> modules
Rule 4     file_statement -> include_modules
Rule 5     file_statement -> include_modules modules
Rule 6     include_modules -> include_module
Rule 7     include_modules -> include_modules include_module
Rule 8     include_module -> MACRO_INCLUDE ICE_FILE
Rule 9     modules -> module
Rule 10    modules -> modules module
Rule 11    module -> MODULE ID { module_members } END
Rule 12    module -> MODULE ID { } END
Rule 13    module_members -> module_member
Rule 14    module_members -> module_members module_member
Rule 15    module_member -> module
Rule 16    module_member -> type_define
Rule 17    module_member -> struct
Rule 18    module_member -> interface
Rule 19    module_member -> const_data
Rule 20    module_member -> enum
Rule 21    const_data -> CONST var_type ID = data END
Rule 22    data -> NUMBER
Rule 23    data -> BOOL
Rule 24    data -> FLOAT
Rule 25    data -> STRING
Rule 26    data -> var_type
Rule 27    type_define -> sequence_type ID END
Rule 28    type_define -> dictionary_type ID END
Rule 29    enum -> ENUM ID { enum_members } END
Rule 30    enum_members -> enum_member
Rule 31    enum_members -> enum_members enum_member
Rule 32    enum_member -> ID ,
Rule 33    enum_member -> ID = NUMBER ,
Rule 34    enum_member -> ID = var_type ,
Rule 35    sequence_type -> SEQUENCE < var_type >
Rule 36    dictionary_type -> DICTIONARY < var_type , var_type >
Rule 37    var_type -> ID
Rule 38    var_type -> domain ID
Rule 39    domain -> DOMAIN
Rule 40    domain -> ID DOMAIN
Rule 41    domain -> domain ID DOMAIN
Rule 42    struct -> STRUCT ID { data_members } END
Rule 43    data_members -> data_member
Rule 44    data_members -> data_members data_member
Rule 45    data_member -> var_type ID END
Rule 46    interface -> INTERFACE ID { member_funcs } END
Rule 47    interface -> INTERFACE ID { } END
Rule 48    member_funcs -> member_func
Rule 49    member_funcs -> member_funcs member_func
Rule 50    member_func -> INTERFACE_TYPE var_type ID ( params ) END
Rule 51    member_func -> var_type ID ( params ) END
Rule 52    member_func -> var_type ID ( ) END
Rule 53    params -> param
Rule 54    params -> params , param
Rule 55    param -> var_type ID
Rule 56    param -> OUT var_type ID

Terminals, with rules where they appear

(                    : 50 51 52
)                    : 50 51 52
,                    : 32 33 34 36 54
<                    : 35 36
=                    : 21 33 34
>                    : 35 36
BOOL                 : 23
COMMENT              : 
CONST                : 21
DICTIONARY           : 36
DOMAIN               : 39 40 41
END                  : 11 12 21 27 28 29 42 45 46 47 50 51 52
ENUM                 : 29
FLOAT                : 24
ICE_FILE             : 8
ID                   : 1 1 11 12 21 27 28 29 32 33 34 37 38 40 41 42 45 46 47 50 51 52 55 56
INTERFACE            : 46 47
INTERFACE_TYPE       : 50
MACRO_DEFINE         : 1
MACRO_ENDIF          : 1
MACRO_IFNDEF         : 1
MACRO_INCLUDE        : 8
MODULE               : 11 12
NUMBER               : 22 33
OUT                  : 56
SEQUENCE             : 35
STRING               : 25
STRUCT               : 42
error                : 
{                    : 11 12 29 42 46 47
}                    : 11 12 29 42 46 47

Nonterminals, with rules where they appear

const_data           : 19
data                 : 21
data_member          : 43 44
data_members         : 42 44
dictionary_type      : 28
domain               : 38 41
enum                 : 20
enum_member          : 30 31
enum_members         : 29 31
file_statement       : 1
ice_file             : 0
include_module       : 6 7
include_modules      : 4 5 7
interface            : 18
member_func          : 48 49
member_funcs         : 46 49
module               : 9 10 15
module_member        : 13 14
module_members       : 11 14
modules              : 3 5 10
param                : 53 54
params               : 50 51 54
sequence_type        : 27
struct               : 17
type_define          : 16
var_type             : 21 26 34 35 36 36 45 50 51 52 55 56

Parsing method: LALR

state 0

    (0) S' -> . ice_file
    (1) ice_file -> . MACRO_IFNDEF ID MACRO_DEFINE ID file_statement MACRO_ENDIF

    MACRO_IFNDEF    shift and go to state 2

    ice_file                       shift and go to state 1

state 1

    (0) S' -> ice_file .



state 2

    (1) ice_file -> MACRO_IFNDEF . ID MACRO_DEFINE ID file_statement MACRO_ENDIF

    ID              shift and go to state 3


state 3

    (1) ice_file -> MACRO_IFNDEF ID . MACRO_DEFINE ID file_statement MACRO_ENDIF

    MACRO_DEFINE    shift and go to state 4


state 4

    (1) ice_file -> MACRO_IFNDEF ID MACRO_DEFINE . ID file_statement MACRO_ENDIF

    ID              shift and go to state 5


state 5

    (1) ice_file -> MACRO_IFNDEF ID MACRO_DEFINE ID . file_statement MACRO_ENDIF
    (2) file_statement -> .
    (3) file_statement -> . modules
    (4) file_statement -> . include_modules
    (5) file_statement -> . include_modules modules
    (9) modules -> . module
    (10) modules -> . modules module
    (6) include_modules -> . include_module
    (7) include_modules -> . include_modules include_module
    (11) module -> . MODULE ID { module_members } END
    (12) module -> . MODULE ID { } END
    (8) include_module -> . MACRO_INCLUDE ICE_FILE

    MACRO_ENDIF     reduce using rule 2 (file_statement -> .)
    MODULE          shift and go to state 6
    MACRO_INCLUDE   shift and go to state 7

    file_statement                 shift and go to state 11
    modules                        shift and go to state 8
    include_module                 shift and go to state 9
    module                         shift and go to state 10
    include_modules                shift and go to state 12

state 6

    (11) module -> MODULE . ID { module_members } END
    (12) module -> MODULE . ID { } END

    ID              shift and go to state 13


state 7

    (8) include_module -> MACRO_INCLUDE . ICE_FILE

    ICE_FILE        shift and go to state 14


state 8

    (3) file_statement -> modules .
    (10) modules -> modules . module
    (11) module -> . MODULE ID { module_members } END
    (12) module -> . MODULE ID { } END

    MACRO_ENDIF     reduce using rule 3 (file_statement -> modules .)
    MODULE          shift and go to state 6

    module                         shift and go to state 15

state 9

    (6) include_modules -> include_module .

    MACRO_INCLUDE   reduce using rule 6 (include_modules -> include_module .)
    MODULE          reduce using rule 6 (include_modules -> include_module .)
    MACRO_ENDIF     reduce using rule 6 (include_modules -> include_module .)


state 10

    (9) modules -> module .

    MODULE          reduce using rule 9 (modules -> module .)
    MACRO_ENDIF     reduce using rule 9 (modules -> module .)


state 11

    (1) ice_file -> MACRO_IFNDEF ID MACRO_DEFINE ID file_statement . MACRO_ENDIF

    MACRO_ENDIF     shift and go to state 16


state 12

    (4) file_statement -> include_modules .
    (5) file_statement -> include_modules . modules
    (7) include_modules -> include_modules . include_module
    (9) modules -> . module
    (10) modules -> . modules module
    (8) include_module -> . MACRO_INCLUDE ICE_FILE
    (11) module -> . MODULE ID { module_members } END
    (12) module -> . MODULE ID { } END

    MACRO_ENDIF     reduce using rule 4 (file_statement -> include_modules .)
    MACRO_INCLUDE   shift and go to state 7
    MODULE          shift and go to state 6

    modules                        shift and go to state 17
    module                         shift and go to state 10
    include_module                 shift and go to state 18

state 13

    (11) module -> MODULE ID . { module_members } END
    (12) module -> MODULE ID . { } END

    {               shift and go to state 19


state 14

    (8) include_module -> MACRO_INCLUDE ICE_FILE .

    MACRO_INCLUDE   reduce using rule 8 (include_module -> MACRO_INCLUDE ICE_FILE .)
    MODULE          reduce using rule 8 (include_module -> MACRO_INCLUDE ICE_FILE .)
    MACRO_ENDIF     reduce using rule 8 (include_module -> MACRO_INCLUDE ICE_FILE .)


state 15

    (10) modules -> modules module .

    MODULE          reduce using rule 10 (modules -> modules module .)
    MACRO_ENDIF     reduce using rule 10 (modules -> modules module .)


state 16

    (1) ice_file -> MACRO_IFNDEF ID MACRO_DEFINE ID file_statement MACRO_ENDIF .

    $end            reduce using rule 1 (ice_file -> MACRO_IFNDEF ID MACRO_DEFINE ID file_statement MACRO_ENDIF .)


state 17

    (5) file_statement -> include_modules modules .
    (10) modules -> modules . module
    (11) module -> . MODULE ID { module_members } END
    (12) module -> . MODULE ID { } END

    MACRO_ENDIF     reduce using rule 5 (file_statement -> include_modules modules .)
    MODULE          shift and go to state 6

    module                         shift and go to state 15

state 18

    (7) include_modules -> include_modules include_module .

    MACRO_INCLUDE   reduce using rule 7 (include_modules -> include_modules include_module .)
    MODULE          reduce using rule 7 (include_modules -> include_modules include_module .)
    MACRO_ENDIF     reduce using rule 7 (include_modules -> include_modules include_module .)


state 19

    (11) module -> MODULE ID { . module_members } END
    (12) module -> MODULE ID { . } END
    (13) module_members -> . module_member
    (14) module_members -> . module_members module_member
    (15) module_member -> . module
    (16) module_member -> . type_define
    (17) module_member -> . struct
    (18) module_member -> . interface
    (19) module_member -> . const_data
    (20) module_member -> . enum
    (11) module -> . MODULE ID { module_members } END
    (12) module -> . MODULE ID { } END
    (27) type_define -> . sequence_type ID END
    (28) type_define -> . dictionary_type ID END
    (42) struct -> . STRUCT ID { data_members } END
    (46) interface -> . INTERFACE ID { member_funcs } END
    (47) interface -> . INTERFACE ID { } END
    (21) const_data -> . CONST var_type ID = data END
    (29) enum -> . ENUM ID { enum_members } END
    (35) sequence_type -> . SEQUENCE < var_type >
    (36) dictionary_type -> . DICTIONARY < var_type , var_type >

    }               shift and go to state 35
    MODULE          shift and go to state 6
    STRUCT          shift and go to state 33
    INTERFACE       shift and go to state 34
    CONST           shift and go to state 20
    ENUM            shift and go to state 28
    SEQUENCE        shift and go to state 30
    DICTIONARY      shift and go to state 29

    struct                         shift and go to state 25
    enum                           shift and go to state 31
    module_member                  shift and go to state 21
    module                         shift and go to state 22
    sequence_type                  shift and go to state 26
    const_data                     shift and go to state 36
    interface                      shift and go to state 32
    dictionary_type                shift and go to state 23
    type_define                    shift and go to state 24
    module_members                 shift and go to state 27

state 20

    (21) const_data -> CONST . var_type ID = data END
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 38

state 21

    (13) module_members -> module_member .

    }               reduce using rule 13 (module_members -> module_member .)
    MODULE          reduce using rule 13 (module_members -> module_member .)
    STRUCT          reduce using rule 13 (module_members -> module_member .)
    INTERFACE       reduce using rule 13 (module_members -> module_member .)
    CONST           reduce using rule 13 (module_members -> module_member .)
    ENUM            reduce using rule 13 (module_members -> module_member .)
    SEQUENCE        reduce using rule 13 (module_members -> module_member .)
    DICTIONARY      reduce using rule 13 (module_members -> module_member .)


state 22

    (15) module_member -> module .

    }               reduce using rule 15 (module_member -> module .)
    MODULE          reduce using rule 15 (module_member -> module .)
    STRUCT          reduce using rule 15 (module_member -> module .)
    INTERFACE       reduce using rule 15 (module_member -> module .)
    CONST           reduce using rule 15 (module_member -> module .)
    ENUM            reduce using rule 15 (module_member -> module .)
    SEQUENCE        reduce using rule 15 (module_member -> module .)
    DICTIONARY      reduce using rule 15 (module_member -> module .)


state 23

    (28) type_define -> dictionary_type . ID END

    ID              shift and go to state 41


state 24

    (16) module_member -> type_define .

    }               reduce using rule 16 (module_member -> type_define .)
    MODULE          reduce using rule 16 (module_member -> type_define .)
    STRUCT          reduce using rule 16 (module_member -> type_define .)
    INTERFACE       reduce using rule 16 (module_member -> type_define .)
    CONST           reduce using rule 16 (module_member -> type_define .)
    ENUM            reduce using rule 16 (module_member -> type_define .)
    SEQUENCE        reduce using rule 16 (module_member -> type_define .)
    DICTIONARY      reduce using rule 16 (module_member -> type_define .)


state 25

    (17) module_member -> struct .

    }               reduce using rule 17 (module_member -> struct .)
    MODULE          reduce using rule 17 (module_member -> struct .)
    STRUCT          reduce using rule 17 (module_member -> struct .)
    INTERFACE       reduce using rule 17 (module_member -> struct .)
    CONST           reduce using rule 17 (module_member -> struct .)
    ENUM            reduce using rule 17 (module_member -> struct .)
    SEQUENCE        reduce using rule 17 (module_member -> struct .)
    DICTIONARY      reduce using rule 17 (module_member -> struct .)


state 26

    (27) type_define -> sequence_type . ID END

    ID              shift and go to state 42


state 27

    (11) module -> MODULE ID { module_members . } END
    (14) module_members -> module_members . module_member
    (15) module_member -> . module
    (16) module_member -> . type_define
    (17) module_member -> . struct
    (18) module_member -> . interface
    (19) module_member -> . const_data
    (20) module_member -> . enum
    (11) module -> . MODULE ID { module_members } END
    (12) module -> . MODULE ID { } END
    (27) type_define -> . sequence_type ID END
    (28) type_define -> . dictionary_type ID END
    (42) struct -> . STRUCT ID { data_members } END
    (46) interface -> . INTERFACE ID { member_funcs } END
    (47) interface -> . INTERFACE ID { } END
    (21) const_data -> . CONST var_type ID = data END
    (29) enum -> . ENUM ID { enum_members } END
    (35) sequence_type -> . SEQUENCE < var_type >
    (36) dictionary_type -> . DICTIONARY < var_type , var_type >

    }               shift and go to state 44
    MODULE          shift and go to state 6
    STRUCT          shift and go to state 33
    INTERFACE       shift and go to state 34
    CONST           shift and go to state 20
    ENUM            shift and go to state 28
    SEQUENCE        shift and go to state 30
    DICTIONARY      shift and go to state 29

    struct                         shift and go to state 25
    enum                           shift and go to state 31
    module_member                  shift and go to state 43
    module                         shift and go to state 22
    sequence_type                  shift and go to state 26
    const_data                     shift and go to state 36
    interface                      shift and go to state 32
    dictionary_type                shift and go to state 23
    type_define                    shift and go to state 24

state 28

    (29) enum -> ENUM . ID { enum_members } END

    ID              shift and go to state 45


state 29

    (36) dictionary_type -> DICTIONARY . < var_type , var_type >

    <               shift and go to state 46


state 30

    (35) sequence_type -> SEQUENCE . < var_type >

    <               shift and go to state 47


state 31

    (20) module_member -> enum .

    }               reduce using rule 20 (module_member -> enum .)
    MODULE          reduce using rule 20 (module_member -> enum .)
    STRUCT          reduce using rule 20 (module_member -> enum .)
    INTERFACE       reduce using rule 20 (module_member -> enum .)
    CONST           reduce using rule 20 (module_member -> enum .)
    ENUM            reduce using rule 20 (module_member -> enum .)
    SEQUENCE        reduce using rule 20 (module_member -> enum .)
    DICTIONARY      reduce using rule 20 (module_member -> enum .)


state 32

    (18) module_member -> interface .

    }               reduce using rule 18 (module_member -> interface .)
    MODULE          reduce using rule 18 (module_member -> interface .)
    STRUCT          reduce using rule 18 (module_member -> interface .)
    INTERFACE       reduce using rule 18 (module_member -> interface .)
    CONST           reduce using rule 18 (module_member -> interface .)
    ENUM            reduce using rule 18 (module_member -> interface .)
    SEQUENCE        reduce using rule 18 (module_member -> interface .)
    DICTIONARY      reduce using rule 18 (module_member -> interface .)


state 33

    (42) struct -> STRUCT . ID { data_members } END

    ID              shift and go to state 48


state 34

    (46) interface -> INTERFACE . ID { member_funcs } END
    (47) interface -> INTERFACE . ID { } END

    ID              shift and go to state 49


state 35

    (12) module -> MODULE ID { } . END

    END             shift and go to state 50


state 36

    (19) module_member -> const_data .

    }               reduce using rule 19 (module_member -> const_data .)
    MODULE          reduce using rule 19 (module_member -> const_data .)
    STRUCT          reduce using rule 19 (module_member -> const_data .)
    INTERFACE       reduce using rule 19 (module_member -> const_data .)
    CONST           reduce using rule 19 (module_member -> const_data .)
    ENUM            reduce using rule 19 (module_member -> const_data .)
    SEQUENCE        reduce using rule 19 (module_member -> const_data .)
    DICTIONARY      reduce using rule 19 (module_member -> const_data .)


state 37

    (38) var_type -> domain . ID
    (41) domain -> domain . ID DOMAIN

    ID              shift and go to state 51


state 38

    (21) const_data -> CONST var_type . ID = data END

    ID              shift and go to state 52


state 39

    (39) domain -> DOMAIN .

    ID              reduce using rule 39 (domain -> DOMAIN .)


state 40

    (37) var_type -> ID .
    (40) domain -> ID . DOMAIN

    ID              reduce using rule 37 (var_type -> ID .)
    >               reduce using rule 37 (var_type -> ID .)
    END             reduce using rule 37 (var_type -> ID .)
    ,               reduce using rule 37 (var_type -> ID .)
    DOMAIN          shift and go to state 53


state 41

    (28) type_define -> dictionary_type ID . END

    END             shift and go to state 54


state 42

    (27) type_define -> sequence_type ID . END

    END             shift and go to state 55


state 43

    (14) module_members -> module_members module_member .

    }               reduce using rule 14 (module_members -> module_members module_member .)
    MODULE          reduce using rule 14 (module_members -> module_members module_member .)
    STRUCT          reduce using rule 14 (module_members -> module_members module_member .)
    INTERFACE       reduce using rule 14 (module_members -> module_members module_member .)
    CONST           reduce using rule 14 (module_members -> module_members module_member .)
    ENUM            reduce using rule 14 (module_members -> module_members module_member .)
    SEQUENCE        reduce using rule 14 (module_members -> module_members module_member .)
    DICTIONARY      reduce using rule 14 (module_members -> module_members module_member .)


state 44

    (11) module -> MODULE ID { module_members } . END

    END             shift and go to state 56


state 45

    (29) enum -> ENUM ID . { enum_members } END

    {               shift and go to state 57


state 46

    (36) dictionary_type -> DICTIONARY < . var_type , var_type >
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 58

state 47

    (35) sequence_type -> SEQUENCE < . var_type >
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 59

state 48

    (42) struct -> STRUCT ID . { data_members } END

    {               shift and go to state 60


state 49

    (46) interface -> INTERFACE ID . { member_funcs } END
    (47) interface -> INTERFACE ID . { } END

    {               shift and go to state 61


state 50

    (12) module -> MODULE ID { } END .

    MODULE          reduce using rule 12 (module -> MODULE ID { } END .)
    MACRO_ENDIF     reduce using rule 12 (module -> MODULE ID { } END .)
    }               reduce using rule 12 (module -> MODULE ID { } END .)
    STRUCT          reduce using rule 12 (module -> MODULE ID { } END .)
    INTERFACE       reduce using rule 12 (module -> MODULE ID { } END .)
    CONST           reduce using rule 12 (module -> MODULE ID { } END .)
    ENUM            reduce using rule 12 (module -> MODULE ID { } END .)
    SEQUENCE        reduce using rule 12 (module -> MODULE ID { } END .)
    DICTIONARY      reduce using rule 12 (module -> MODULE ID { } END .)


state 51

    (38) var_type -> domain ID .
    (41) domain -> domain ID . DOMAIN

    ID              reduce using rule 38 (var_type -> domain ID .)
    >               reduce using rule 38 (var_type -> domain ID .)
    END             reduce using rule 38 (var_type -> domain ID .)
    ,               reduce using rule 38 (var_type -> domain ID .)
    DOMAIN          shift and go to state 62


state 52

    (21) const_data -> CONST var_type ID . = data END

    =               shift and go to state 63


state 53

    (40) domain -> ID DOMAIN .

    ID              reduce using rule 40 (domain -> ID DOMAIN .)


state 54

    (28) type_define -> dictionary_type ID END .

    }               reduce using rule 28 (type_define -> dictionary_type ID END .)
    MODULE          reduce using rule 28 (type_define -> dictionary_type ID END .)
    STRUCT          reduce using rule 28 (type_define -> dictionary_type ID END .)
    INTERFACE       reduce using rule 28 (type_define -> dictionary_type ID END .)
    CONST           reduce using rule 28 (type_define -> dictionary_type ID END .)
    ENUM            reduce using rule 28 (type_define -> dictionary_type ID END .)
    SEQUENCE        reduce using rule 28 (type_define -> dictionary_type ID END .)
    DICTIONARY      reduce using rule 28 (type_define -> dictionary_type ID END .)


state 55

    (27) type_define -> sequence_type ID END .

    }               reduce using rule 27 (type_define -> sequence_type ID END .)
    MODULE          reduce using rule 27 (type_define -> sequence_type ID END .)
    STRUCT          reduce using rule 27 (type_define -> sequence_type ID END .)
    INTERFACE       reduce using rule 27 (type_define -> sequence_type ID END .)
    CONST           reduce using rule 27 (type_define -> sequence_type ID END .)
    ENUM            reduce using rule 27 (type_define -> sequence_type ID END .)
    SEQUENCE        reduce using rule 27 (type_define -> sequence_type ID END .)
    DICTIONARY      reduce using rule 27 (type_define -> sequence_type ID END .)


state 56

    (11) module -> MODULE ID { module_members } END .

    MODULE          reduce using rule 11 (module -> MODULE ID { module_members } END .)
    MACRO_ENDIF     reduce using rule 11 (module -> MODULE ID { module_members } END .)
    }               reduce using rule 11 (module -> MODULE ID { module_members } END .)
    STRUCT          reduce using rule 11 (module -> MODULE ID { module_members } END .)
    INTERFACE       reduce using rule 11 (module -> MODULE ID { module_members } END .)
    CONST           reduce using rule 11 (module -> MODULE ID { module_members } END .)
    ENUM            reduce using rule 11 (module -> MODULE ID { module_members } END .)
    SEQUENCE        reduce using rule 11 (module -> MODULE ID { module_members } END .)
    DICTIONARY      reduce using rule 11 (module -> MODULE ID { module_members } END .)


state 57

    (29) enum -> ENUM ID { . enum_members } END
    (30) enum_members -> . enum_member
    (31) enum_members -> . enum_members enum_member
    (32) enum_member -> . ID ,
    (33) enum_member -> . ID = NUMBER ,
    (34) enum_member -> . ID = var_type ,

    ID              shift and go to state 66

    enum_member                    shift and go to state 65
    enum_members                   shift and go to state 64

state 58

    (36) dictionary_type -> DICTIONARY < var_type . , var_type >

    ,               shift and go to state 67


state 59

    (35) sequence_type -> SEQUENCE < var_type . >

    >               shift and go to state 68


state 60

    (42) struct -> STRUCT ID { . data_members } END
    (43) data_members -> . data_member
    (44) data_members -> . data_members data_member
    (45) data_member -> . var_type ID END
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    data_member                    shift and go to state 71
    data_members                   shift and go to state 70
    domain                         shift and go to state 37
    var_type                       shift and go to state 69

state 61

    (46) interface -> INTERFACE ID { . member_funcs } END
    (47) interface -> INTERFACE ID { . } END
    (48) member_funcs -> . member_func
    (49) member_funcs -> . member_funcs member_func
    (50) member_func -> . INTERFACE_TYPE var_type ID ( params ) END
    (51) member_func -> . var_type ID ( params ) END
    (52) member_func -> . var_type ID ( ) END
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    }               shift and go to state 75
    INTERFACE_TYPE  shift and go to state 74
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    member_funcs                   shift and go to state 76
    member_func                    shift and go to state 73
    domain                         shift and go to state 37
    var_type                       shift and go to state 72

state 62

    (41) domain -> domain ID DOMAIN .

    ID              reduce using rule 41 (domain -> domain ID DOMAIN .)


state 63

    (21) const_data -> CONST var_type ID = . data END
    (22) data -> . NUMBER
    (23) data -> . BOOL
    (24) data -> . FLOAT
    (25) data -> . STRING
    (26) data -> . var_type
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    NUMBER          shift and go to state 81
    BOOL            shift and go to state 82
    FLOAT           shift and go to state 80
    STRING          shift and go to state 77
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    data                           shift and go to state 79
    var_type                       shift and go to state 78

state 64

    (29) enum -> ENUM ID { enum_members . } END
    (31) enum_members -> enum_members . enum_member
    (32) enum_member -> . ID ,
    (33) enum_member -> . ID = NUMBER ,
    (34) enum_member -> . ID = var_type ,

    }               shift and go to state 84
    ID              shift and go to state 66

    enum_member                    shift and go to state 83

state 65

    (30) enum_members -> enum_member .

    }               reduce using rule 30 (enum_members -> enum_member .)
    ID              reduce using rule 30 (enum_members -> enum_member .)


state 66

    (32) enum_member -> ID . ,
    (33) enum_member -> ID . = NUMBER ,
    (34) enum_member -> ID . = var_type ,

    ,               shift and go to state 86
    =               shift and go to state 85


state 67

    (36) dictionary_type -> DICTIONARY < var_type , . var_type >
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 87

state 68

    (35) sequence_type -> SEQUENCE < var_type > .

    ID              reduce using rule 35 (sequence_type -> SEQUENCE < var_type > .)


state 69

    (45) data_member -> var_type . ID END

    ID              shift and go to state 88


state 70

    (42) struct -> STRUCT ID { data_members . } END
    (44) data_members -> data_members . data_member
    (45) data_member -> . var_type ID END
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    }               shift and go to state 90
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    data_member                    shift and go to state 89
    domain                         shift and go to state 37
    var_type                       shift and go to state 69

state 71

    (43) data_members -> data_member .

    }               reduce using rule 43 (data_members -> data_member .)
    ID              reduce using rule 43 (data_members -> data_member .)
    DOMAIN          reduce using rule 43 (data_members -> data_member .)


state 72

    (51) member_func -> var_type . ID ( params ) END
    (52) member_func -> var_type . ID ( ) END

    ID              shift and go to state 91


state 73

    (48) member_funcs -> member_func .

    }               reduce using rule 48 (member_funcs -> member_func .)
    INTERFACE_TYPE  reduce using rule 48 (member_funcs -> member_func .)
    ID              reduce using rule 48 (member_funcs -> member_func .)
    DOMAIN          reduce using rule 48 (member_funcs -> member_func .)


state 74

    (50) member_func -> INTERFACE_TYPE . var_type ID ( params ) END
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 92

state 75

    (47) interface -> INTERFACE ID { } . END

    END             shift and go to state 93


state 76

    (46) interface -> INTERFACE ID { member_funcs . } END
    (49) member_funcs -> member_funcs . member_func
    (50) member_func -> . INTERFACE_TYPE var_type ID ( params ) END
    (51) member_func -> . var_type ID ( params ) END
    (52) member_func -> . var_type ID ( ) END
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    }               shift and go to state 95
    INTERFACE_TYPE  shift and go to state 74
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    member_func                    shift and go to state 94
    domain                         shift and go to state 37
    var_type                       shift and go to state 72

state 77

    (25) data -> STRING .

    END             reduce using rule 25 (data -> STRING .)


state 78

    (26) data -> var_type .

    END             reduce using rule 26 (data -> var_type .)


state 79

    (21) const_data -> CONST var_type ID = data . END

    END             shift and go to state 96


state 80

    (24) data -> FLOAT .

    END             reduce using rule 24 (data -> FLOAT .)


state 81

    (22) data -> NUMBER .

    END             reduce using rule 22 (data -> NUMBER .)


state 82

    (23) data -> BOOL .

    END             reduce using rule 23 (data -> BOOL .)


state 83

    (31) enum_members -> enum_members enum_member .

    }               reduce using rule 31 (enum_members -> enum_members enum_member .)
    ID              reduce using rule 31 (enum_members -> enum_members enum_member .)


state 84

    (29) enum -> ENUM ID { enum_members } . END

    END             shift and go to state 97


state 85

    (33) enum_member -> ID = . NUMBER ,
    (34) enum_member -> ID = . var_type ,
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    NUMBER          shift and go to state 99
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 98

state 86

    (32) enum_member -> ID , .

    }               reduce using rule 32 (enum_member -> ID , .)
    ID              reduce using rule 32 (enum_member -> ID , .)


state 87

    (36) dictionary_type -> DICTIONARY < var_type , var_type . >

    >               shift and go to state 100


state 88

    (45) data_member -> var_type ID . END

    END             shift and go to state 101


state 89

    (44) data_members -> data_members data_member .

    }               reduce using rule 44 (data_members -> data_members data_member .)
    ID              reduce using rule 44 (data_members -> data_members data_member .)
    DOMAIN          reduce using rule 44 (data_members -> data_members data_member .)


state 90

    (42) struct -> STRUCT ID { data_members } . END

    END             shift and go to state 102


state 91

    (51) member_func -> var_type ID . ( params ) END
    (52) member_func -> var_type ID . ( ) END

    (               shift and go to state 103


state 92

    (50) member_func -> INTERFACE_TYPE var_type . ID ( params ) END

    ID              shift and go to state 104


state 93

    (47) interface -> INTERFACE ID { } END .

    }               reduce using rule 47 (interface -> INTERFACE ID { } END .)
    MODULE          reduce using rule 47 (interface -> INTERFACE ID { } END .)
    STRUCT          reduce using rule 47 (interface -> INTERFACE ID { } END .)
    INTERFACE       reduce using rule 47 (interface -> INTERFACE ID { } END .)
    CONST           reduce using rule 47 (interface -> INTERFACE ID { } END .)
    ENUM            reduce using rule 47 (interface -> INTERFACE ID { } END .)
    SEQUENCE        reduce using rule 47 (interface -> INTERFACE ID { } END .)
    DICTIONARY      reduce using rule 47 (interface -> INTERFACE ID { } END .)


state 94

    (49) member_funcs -> member_funcs member_func .

    }               reduce using rule 49 (member_funcs -> member_funcs member_func .)
    INTERFACE_TYPE  reduce using rule 49 (member_funcs -> member_funcs member_func .)
    ID              reduce using rule 49 (member_funcs -> member_funcs member_func .)
    DOMAIN          reduce using rule 49 (member_funcs -> member_funcs member_func .)


state 95

    (46) interface -> INTERFACE ID { member_funcs } . END

    END             shift and go to state 105


state 96

    (21) const_data -> CONST var_type ID = data END .

    }               reduce using rule 21 (const_data -> CONST var_type ID = data END .)
    MODULE          reduce using rule 21 (const_data -> CONST var_type ID = data END .)
    STRUCT          reduce using rule 21 (const_data -> CONST var_type ID = data END .)
    INTERFACE       reduce using rule 21 (const_data -> CONST var_type ID = data END .)
    CONST           reduce using rule 21 (const_data -> CONST var_type ID = data END .)
    ENUM            reduce using rule 21 (const_data -> CONST var_type ID = data END .)
    SEQUENCE        reduce using rule 21 (const_data -> CONST var_type ID = data END .)
    DICTIONARY      reduce using rule 21 (const_data -> CONST var_type ID = data END .)


state 97

    (29) enum -> ENUM ID { enum_members } END .

    }               reduce using rule 29 (enum -> ENUM ID { enum_members } END .)
    MODULE          reduce using rule 29 (enum -> ENUM ID { enum_members } END .)
    STRUCT          reduce using rule 29 (enum -> ENUM ID { enum_members } END .)
    INTERFACE       reduce using rule 29 (enum -> ENUM ID { enum_members } END .)
    CONST           reduce using rule 29 (enum -> ENUM ID { enum_members } END .)
    ENUM            reduce using rule 29 (enum -> ENUM ID { enum_members } END .)
    SEQUENCE        reduce using rule 29 (enum -> ENUM ID { enum_members } END .)
    DICTIONARY      reduce using rule 29 (enum -> ENUM ID { enum_members } END .)


state 98

    (34) enum_member -> ID = var_type . ,

    ,               shift and go to state 106


state 99

    (33) enum_member -> ID = NUMBER . ,

    ,               shift and go to state 107


state 100

    (36) dictionary_type -> DICTIONARY < var_type , var_type > .

    ID              reduce using rule 36 (dictionary_type -> DICTIONARY < var_type , var_type > .)


state 101

    (45) data_member -> var_type ID END .

    }               reduce using rule 45 (data_member -> var_type ID END .)
    ID              reduce using rule 45 (data_member -> var_type ID END .)
    DOMAIN          reduce using rule 45 (data_member -> var_type ID END .)


state 102

    (42) struct -> STRUCT ID { data_members } END .

    }               reduce using rule 42 (struct -> STRUCT ID { data_members } END .)
    MODULE          reduce using rule 42 (struct -> STRUCT ID { data_members } END .)
    STRUCT          reduce using rule 42 (struct -> STRUCT ID { data_members } END .)
    INTERFACE       reduce using rule 42 (struct -> STRUCT ID { data_members } END .)
    CONST           reduce using rule 42 (struct -> STRUCT ID { data_members } END .)
    ENUM            reduce using rule 42 (struct -> STRUCT ID { data_members } END .)
    SEQUENCE        reduce using rule 42 (struct -> STRUCT ID { data_members } END .)
    DICTIONARY      reduce using rule 42 (struct -> STRUCT ID { data_members } END .)


state 103

    (51) member_func -> var_type ID ( . params ) END
    (52) member_func -> var_type ID ( . ) END
    (53) params -> . param
    (54) params -> . params , param
    (55) param -> . var_type ID
    (56) param -> . OUT var_type ID
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    )               shift and go to state 109
    OUT             shift and go to state 112
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    params                         shift and go to state 111
    param                          shift and go to state 110
    var_type                       shift and go to state 108

state 104

    (50) member_func -> INTERFACE_TYPE var_type ID . ( params ) END

    (               shift and go to state 113


state 105

    (46) interface -> INTERFACE ID { member_funcs } END .

    }               reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)
    MODULE          reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)
    STRUCT          reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)
    INTERFACE       reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)
    CONST           reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)
    ENUM            reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)
    SEQUENCE        reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)
    DICTIONARY      reduce using rule 46 (interface -> INTERFACE ID { member_funcs } END .)


state 106

    (34) enum_member -> ID = var_type , .

    }               reduce using rule 34 (enum_member -> ID = var_type , .)
    ID              reduce using rule 34 (enum_member -> ID = var_type , .)


state 107

    (33) enum_member -> ID = NUMBER , .

    }               reduce using rule 33 (enum_member -> ID = NUMBER , .)
    ID              reduce using rule 33 (enum_member -> ID = NUMBER , .)


state 108

    (55) param -> var_type . ID

    ID              shift and go to state 114


state 109

    (52) member_func -> var_type ID ( ) . END

    END             shift and go to state 115


state 110

    (53) params -> param .

    )               reduce using rule 53 (params -> param .)
    ,               reduce using rule 53 (params -> param .)


state 111

    (51) member_func -> var_type ID ( params . ) END
    (54) params -> params . , param

    )               shift and go to state 116
    ,               shift and go to state 117


state 112

    (56) param -> OUT . var_type ID
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 118

state 113

    (50) member_func -> INTERFACE_TYPE var_type ID ( . params ) END
    (53) params -> . param
    (54) params -> . params , param
    (55) param -> . var_type ID
    (56) param -> . OUT var_type ID
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    OUT             shift and go to state 112
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    params                         shift and go to state 119
    param                          shift and go to state 110
    var_type                       shift and go to state 108

state 114

    (55) param -> var_type ID .

    )               reduce using rule 55 (param -> var_type ID .)
    ,               reduce using rule 55 (param -> var_type ID .)


state 115

    (52) member_func -> var_type ID ( ) END .

    }               reduce using rule 52 (member_func -> var_type ID ( ) END .)
    INTERFACE_TYPE  reduce using rule 52 (member_func -> var_type ID ( ) END .)
    ID              reduce using rule 52 (member_func -> var_type ID ( ) END .)
    DOMAIN          reduce using rule 52 (member_func -> var_type ID ( ) END .)


state 116

    (51) member_func -> var_type ID ( params ) . END

    END             shift and go to state 120


state 117

    (54) params -> params , . param
    (55) param -> . var_type ID
    (56) param -> . OUT var_type ID
    (37) var_type -> . ID
    (38) var_type -> . domain ID
    (39) domain -> . DOMAIN
    (40) domain -> . ID DOMAIN
    (41) domain -> . domain ID DOMAIN

    OUT             shift and go to state 112
    ID              shift and go to state 40
    DOMAIN          shift and go to state 39

    domain                         shift and go to state 37
    var_type                       shift and go to state 108
    param                          shift and go to state 121

state 118

    (56) param -> OUT var_type . ID

    ID              shift and go to state 122


state 119

    (50) member_func -> INTERFACE_TYPE var_type ID ( params . ) END
    (54) params -> params . , param

    )               shift and go to state 123
    ,               shift and go to state 117


state 120

    (51) member_func -> var_type ID ( params ) END .

    }               reduce using rule 51 (member_func -> var_type ID ( params ) END .)
    INTERFACE_TYPE  reduce using rule 51 (member_func -> var_type ID ( params ) END .)
    ID              reduce using rule 51 (member_func -> var_type ID ( params ) END .)
    DOMAIN          reduce using rule 51 (member_func -> var_type ID ( params ) END .)


state 121

    (54) params -> params , param .

    )               reduce using rule 54 (params -> params , param .)
    ,               reduce using rule 54 (params -> params , param .)


state 122

    (56) param -> OUT var_type ID .

    )               reduce using rule 56 (param -> OUT var_type ID .)
    ,               reduce using rule 56 (param -> OUT var_type ID .)


state 123

    (50) member_func -> INTERFACE_TYPE var_type ID ( params ) . END

    END             shift and go to state 124


state 124

    (50) member_func -> INTERFACE_TYPE var_type ID ( params ) END .

    }               reduce using rule 50 (member_func -> INTERFACE_TYPE var_type ID ( params ) END .)
    INTERFACE_TYPE  reduce using rule 50 (member_func -> INTERFACE_TYPE var_type ID ( params ) END .)
    ID              reduce using rule 50 (member_func -> INTERFACE_TYPE var_type ID ( params ) END .)
    DOMAIN          reduce using rule 50 (member_func -> INTERFACE_TYPE var_type ID ( params ) END .)

